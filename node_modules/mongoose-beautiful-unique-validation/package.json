{
  "_from": "mongoose-beautiful-unique-validation",
  "_id": "mongoose-beautiful-unique-validation@7.1.1",
  "_inBundle": false,
  "_integrity": "sha512-fprzp8nY9Qjg0+RZFMl7gVmbINRt2H53fpqyjJWwPO7nxJ9RZZB/Lo3y+mXaMP4nNMOeoJb2v3dNou6h+iLh8w==",
  "_location": "/mongoose-beautiful-unique-validation",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "mongoose-beautiful-unique-validation",
    "fetchSpec": "latest",
    "name": "mongoose-beautiful-unique-validation",
    "raw": "mongoose-beautiful-unique-validation",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/mongoose-beautiful-unique-validation/-/mongoose-beautiful-unique-validation-7.1.1.tgz",
  "_shasum": "50eaf88e395f9b194cd29ad76913cd9ebd515653",
  "_shrinkwrap": null,
  "_spec": "mongoose-beautiful-unique-validation",
  "_where": "C:\\Users\\Samuel\\Desktop\\Git Projects\\AtomicJudge",
  "author": {
    "email": "contact@matteodelabre.me",
    "name": "Mattéo Delabre ✏️",
    "url": "https://github.com/matteodelabre"
  },
  "bugs": {
    "url": "https://github.com/matteodelabre/mongoose-beautiful-unique-validation/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "Plugin for Mongoose that turns duplicate errors into regular Mongoose validation errors",
  "devDependencies": {
    "eslint": "^4.4.1",
    "eslint-plugin-security": "^1.4.0",
    "kerberos": "0.0.23",
    "mongoose": "^5.0.6",
    "semver": "^5.5.0",
    "tap-spec": "^4.1.1",
    "tape": "^4.7.0"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "homepage": "https://github.com/matteodelabre/mongoose-beautiful-unique-validation#readme",
  "keywords": [
    "error",
    "mongodb",
    "mongoose",
    "plugin",
    "unique"
  ],
  "license": "MIT",
  "main": "index.js",
  "name": "mongoose-beautiful-unique-validation",
  "optionalDependencies": {},
  "peerDependencies": {
    "mongoose": ">=4.11.4"
  },
  "readme": "# mongoose-beautiful-unique-validation\n\nPlugin for Mongoose that turns duplicate errors into regular Mongoose validation errors.\n\n[![npm version](https://img.shields.io/npm/v/mongoose-beautiful-unique-validation.svg?style=flat-square)](https://www.npmjs.com/package/mongoose-beautiful-unique-validation)\n[![npm downloads](https://img.shields.io/npm/dm/mongoose-beautiful-unique-validation.svg?style=flat-square)](https://www.npmjs.com/package/mongoose-beautiful-unique-validation)\n[![build status](https://img.shields.io/travis/matteodelabre/mongoose-beautiful-unique-validation.svg?style=flat-square)](https://travis-ci.org/matteodelabre/mongoose-beautiful-unique-validation)\n[![dependencies status](http://img.shields.io/david/matteodelabre/mongoose-beautiful-unique-validation.svg?style=flat-square)](https://david-dm.org/matteodelabre/mongoose-beautiful-unique-validation)\n\nMongoose's unicity constraint actually relies on MongoDB's `unique` indexes. It means that, if you have a schema like this one:\n\n```js\nmongoose.Schema({\n    name: {\n        type: String,\n        unique: true\n    }\n});\n```\n\nDuplicates will be reported with a driver-level error of this kind:\n\n```json\n{\n    \"name\": \"MongoError\",\n    \"message\": \"insertDocument :: caused by :: 11000 E11000 duplicate key error index: example.users.$name_1 dup key: { : \\\"John\\\" }\",\n    \"index\": 0,\n    \"code\": 11000,\n    \"errmsg\": \"insertDocument :: caused by :: 11000 E11000 duplicate key error index: example.users.$name_1 dup key: { : \\\"John\\\" }\"\n}\n```\n\nBecause these errors are not of the same kind as normal [Validation](http://mongoosejs.com/docs/validation.html) errors, you need to handle them as a special case that complicates the validation logic and leaves room for bugs. This plugin solves this problem by turning driver-level duplicate errors (E11000 and E11001) into regular Validation errors.\n\n```json\n{\n    \"name\": \"ValidationError\",\n    \"message\": \"Model validation failed\",\n    \"errors\": {\n        \"name\": {\n            \"name\":\"ValidatorError\",\n            \"kind\": \"unique\",\n            \"message\": \"Path `name` (John) is not unique.\",\n            \"path\": \"name\",\n            \"value\": \"John\"\n        }\n    }\n}\n```\n\n## Install\n\n```sh\nnpm install --save mongoose-beautiful-unique-validation\n```\n\n### Supported versions of Mongoose\n\nStarting from version 7.0.0, this module only supports Mongoose 4.11.4 and upper. Usage with older Mongoose versions might work, but is not supported. If we need to use outdated versions of Mongoose, use older versions of this package as documented in the table below.\n\n_Note that only security fixes will be backported to older versions._\n\n| This package’s version | Supported Mongoose versions |\n| ----------------------:|:--------------------------- |\n|                      7 | ≥ 4.11.4                    |\n|                   5, 6 | ≥ 4.5.0                     |\n|             1, 2, 3, 4 | ≥ 4.0.0                     |\n\n### Supported versions of Node\n\nThis module currently supports Node.js 4, 5, 6, 7 and 8. If you find a bug while using one of these versions, please [fill a bug report!](https://github.com/matteodelabre/mongoose-beautiful-unique-validation/issues/new)\n\n## Example\n\n### Saving a duplicate document\n\n```js\nconst beautifyUnique = require('mongoose-beautiful-unique-validation');\nconst userSchema = mongoose.Schema({\n    name: {\n        type: String,\n\n        // This value can either be `true` to use the default error\n        // message or a non-empty string to use a custom one.\n        // See `Usage` below for more on error messages.\n        unique: 'Two users cannot share the same username ({VALUE})'\n    }\n});\n\n// Enable beautifying on this schema\nuserSchema.plugin(beautifyUnique);\n\nconst User = mongoose.model('Model', userSchema);\n\n// Wait for the indexes to be created before creating any document\nUser.on('index', err => {\n    if (err) {\n        console.error('Indexes could not be created:', err);\n        return;\n    }\n\n    // Create two conflicting documents\n    const admin1 = new User({\n        name: 'admin'\n    });\n\n    const admin2 = new User({\n        name: 'admin'\n    });\n\n    admin1.save()\n        .then(() => console.log('Success saving admin1!'))\n        .catch(err => console.error('admin1 could not be saved: ', err));\n\n    admin2.save()\n        .then(() => console.log('Success saving admin2!'))\n        .catch(err => console.error('admin2 could not be saved: ', err));\n});\n\n// Will print:\n// Success saving admin1!\n// admin2 could not be saved: [ValidationError: User validation failed]\n```\n\n### Updating a document to be a duplicate\n\n```js\nconst beautifyUnique = require('mongoose-beautiful-unique-validation');\nconst userSchema = mongoose.Schema({\n    name: {\n        type: String,\n        unique: 'Two users cannot share the same username ({VALUE})'\n    }\n});\n\nuserSchema.plugin(beautifyUnique);\nconst User = mongoose.model('Model', userSchema);\n\nUser.on('index', err => {\n    if (err) {\n        console.error('Indexes could not be created:', err);\n        return;\n    }\n\n    // Create two distinct documents\n    let admin1 = new User({\n        name: 'admin1'\n    });\n\n    let admin2 = new User({\n        name: 'admin2'\n    });\n\n    Promise.all([\n        admin1.save(),\n        admin2.save()\n    ]).then(() => {\n        // Try to update admin2 to be a duplicate of admin1\n        admin2\n            .update({\n                $set: {name: 'admin1'}\n            })\n            .exec()\n            .then(() => console.log('Success updating admin2!'))\n            .catch(err => console.error('admin2 could not be updated:', err))\n    }).catch(err => console.error('Could not save documents:', err));\n});\n\n// Will print:\n// admin2 could not be updated: [ValidationError: User validation failed]\n```\n\n## Usage\n\nSchemata in which this module is plugged in will produce beautified duplication errors. You can also use it as a [global plugin.](http://mongoosejs.com/docs/plugins.html#global)\n\n**You need to plug in this module after declaring all indexes on the schema, otherwise they will not be beautified.**\n\nThe reported error has the same shape as normal validation errors. For each field that has a duplicate value, an item is added to the `errors` attribute. See examples above.\n\n### Error messages\n\nBy default, the validation error message will be ``Path `{PATH}` ({VALUE}) is not unique.``, with `{PATH}` replaced by the name of the duplicated field and `{VALUE}` by the value that already existed.\n\nTo set a custom validation message on a particular path, add your message in the `unique` field (instead of `true`), during the schema's creation.\n\n```diff\nconst userSchema = mongoose.Schema({\n    name: {\n        type: String,\n+        unique: 'Two users cannot share the same username ({VALUE})'\n-        unique: true\n    }\n});\n```\n\nWhen using the plugin globally or with a schema that has several paths with unique values, you might want to override the default message value. You can do that through the `defaultMessage` option while adding the plugin.\n\n```js\nuserSchema.plugin(beautifyUnique, {\n    defaultMessage: \"This custom message will be used as the default\"\n});\n```\n\n> **Note**: Custom messages defined in the schema will always take precedence over the global default message.\n\n## Contributions\n\nThis is free and open source software. All contributions (even small ones) are welcome. [Check out the contribution guide to get started!](CONTRIBUTING.md)\n\nThanks to all contributors:\n\n* [Bohdan Tkachenko](https://github.com/BohdanTkachenko)\n* [Savioo](https://github.com/Saviio)\n* [Bhavik Vyas (bvyask)](https://github.com/bvyask)\n* [Nick Sellen](https://github.com/nicksellen)\n* [niftylettuce](https://github.com/niftylettuce)\n* [David Misshula](https://github.com/misshula)\n* [James Davis](https://github.com/davisjam)\n\n## License\n\nReleased under the MIT license. [See the full license text.](https://github.com/matteodelabre/mongoose-beautiful-unique-validation/blob/master/LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/matteodelabre/mongoose-beautiful-unique-validation.git"
  },
  "scripts": {
    "lint": "eslint .",
    "test": "tape tests | tap-spec"
  },
  "version": "7.1.1"
}
